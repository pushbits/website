{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting Started","text":""},{"location":"#installation","title":"Installation","text":"<p>PushBits is meant to be self-hosted. That means you have to install it on your own server. You are advised to install PushBits behind a reverse proxy and enable TLS.</p> <p>Currently, the only supported way of installing PushBits is via Docker or Podman. The image is hosted via ghcr.io.</p>"},{"location":"#configuration","title":"Configuration","text":"<p>To see what can be configured, have a look at the config.sample.yml file inside the root of the repository.</p> <p>Settings can optionally be provided via environment variables. The name of the environment variable is composed of a starting <code>PUSHBITS_</code>, followed by the keys of the setting, all joined with <code>_</code>. As an example, the HTTP port can be provided as an environment variable called <code>PUSHBITS_HTTP_PORT</code>.</p> <p>To get started, here is a Docker Compose file you can use.</p> <pre><code>version: '2'\n\nservices:\n    server:\n        image: ghcr.io/pushbits/server:latest\n        ports:\n            - 8080:8080\n        environment:\n            PUSHBITS_DATABASE_DIALECT: 'sqlite3'\n            PUSHBITS_ADMIN_MATRIXID: '@your/matrix/username:matrix.org' # The Matrix account on which the admin will receive their notifications.\n            PUSHBITS_ADMIN_PASSWORD: 'your/pushbits/password' # The login password of the admin account. Default username is 'admin'.\n            PUSHBITS_MATRIX_USERNAME: 'your/matrix/username' # The Matrix account from which notifications are sent to all users.\n            PUSHBITS_MATRIX_PASSWORD: 'your/matrix/password' # The password of the above account.\n        volumes:\n            - /etc/localtime:/etc/localtime:ro\n            - /etc/timezone:/etc/timezone:ro\n            - ./data:/data\n</code></pre> <p>In this example, the configuration file would be located at <code>./data/config.yml</code> on the host. The SQLite database would be written to <code>./data/pushbits.db</code>. Don't forget to adjust the permissions of the <code>./data</code> directory, otherwise PushBits will fail to operate.</p>"},{"location":"#usage","title":"Usage","text":"<p>We provide a little CLI tool called pbcli to make basic API requests to the server. It helps you to create new users and applications. You will find further instructions in the linked repository.</p> <p>At the time of writing, there is no fancy GUI built-in, and we're not sure if this is necessary at all. Currently, we would like to avoid front end development, so if you want to contribute in this regard we're happy if you reach out!</p> <p>After you have created a user and an application, you can use the API to send a push notification to your Matrix account.</p> <pre><code>curl \\\n    --header \"Content-Type: application/json\" \\\n    --request POST \\\n    --data '{\"message\":\"my message\",\"title\":\"my title\"}' \\\n    \"https://pushbits.example.com/message?token=$PB_TOKEN\"\n</code></pre> <p>Note that the token is associated with your application and has to be kept secret. You can retrieve the token using pbcli by running following command.</p> <pre><code>pbcli application show $PB_APPLICATION --url https://pushbits.example.com --username $PB_USERNAME\n</code></pre>"},{"location":"#message-options","title":"Message options","text":"<p>Messages can be specified in three different syntaxes:</p> <ul> <li><code>text/plain</code></li> <li><code>text/html</code></li> <li><code>text/markdown</code></li> </ul> <p>To set a specific syntax you need to set the <code>extras</code> parameter (inspired by Gotify's message extras):</p> <pre><code>curl \\\n    --header \"Content-Type: application/json\" \\\n    --request POST \\\n    --data '{\"message\":\"my message with\\n\\n**Markdown** _support_.\",\"title\":\"my title\",\"extras\":{\"client::display\":{\"contentType\": \"text/markdown\"}}}' \\\n    \"https://pushbits.example.com/message?token=$PB_TOKEN\"\n</code></pre> <p>HTML content might not be fully rendered in your Matrix client; see the corresponding Matrix specs. This also holds for Markdown, as it is translated into the corresponding HTML syntax.</p>"},{"location":"#deleting-a-message","title":"Deleting a Message","text":"<p>You can delete a message, this will send a notification in response to the original message informing you that the message is \"deleted\".</p> <p>To delete a message, you need its message ID  which is provided as part of the response when you send the message. The ID might contain characters not valid in URIs. We hence provide an additional <code>id_url_encoded</code> field for messages; you can directly use it when deleting a message without performing encoding yourself.</p> <pre><code>curl \\\n    --request DELETE \\\n    \"https://pushbits.example.com/message/${MESSAGE_ID}?token=$PB_TOKEN\"\n</code></pre>"},{"location":"developer-guide/","title":"Developer Guide","text":"<p>This site is under construction.</p>"},{"location":"developer-guide/#testing","title":"Testing","text":"<p>Testing is essential for delivering good and reliable software. PushBits uses Go's integrated test features. Unfortunately, writing tests is quite time consuming and therefore not every feature and every line of code is automatically tested. Feel free to help us improve our tests.</p> <p>To run tests for a single (sub)module you can simply execute the following command in the module's folder.</p> <pre><code>go test\n</code></pre> <p>To get the testing coverage for a module use the <code>-cover</code> flag.</p> <pre><code>go test -cover\n</code></pre> <p>To execute a single test use the <code>-run</code> flag.</p> <pre><code>go test -run \"TestApi_getUser\"\n</code></pre> <p>Running tests for all PushBits module is done like this:</p> <pre><code>make test\n</code></pre>"},{"location":"developer-guide/#testing-the-alertmanager-interface","title":"Testing the Alertmanager interface","text":"<p>Setting up a local Alertmanager instance is done quickly using Docker or Podman. We first create the file <code>config.yml</code> that tells Alertmanger where to send alerts. Don't forget to replace <code>&lt;PB_TOKEN&gt;</code> with your application's token.</p> <pre><code>route:\n  receiver: default\n\nreceivers:\n  - name: default\n    webhook_configs:\n      - url: http://localhost:8080/alert?token=&lt;PB_TOKEN&gt; # Replace &lt;PB_TOKEN&gt; with your application's token.\n</code></pre> <p>We mount this file into a container running Alertmanager. For convenience, let's use this Makefile:</p> <pre><code>CONTAINER_NAME := alertmanager\nIMAGE_NAME := quay.io/prometheus/alertmanager\n\n.PHONY: up\nup:\n    podman run --name $(CONTAINER_NAME) --rm --network host -v $(PWD)/config.yml:/etc/alertmanager/alertmanager.yml:Z $(IMAGE_NAME)\n\n.PHONY: down\ndown:\n    podman container stop $(CONTAINER_NAME)\n\n.PHONY: send\nsend:\n    amtool alert add alertname=testmessage --annotation=title='My Title' --annotation=message='My Message'\n\n.PHONY: setup\nsetup:\n    go install github.com/prometheus/alertmanager/cmd/amtool@latest\n</code></pre> <p>So first you would install the client using <code>make setup</code>, followed by starting Alertmanager with <code>make up</code>. When PushBits is running, a <code>make send</code> would create a new alert in Alertmanager, which is then passed to PushBits via the defined webhook.</p>"},{"location":"user-guide/","title":"User Guide","text":"<p>This site is under construction.</p>"}]}